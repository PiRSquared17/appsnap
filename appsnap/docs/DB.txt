The Problem
-----------

One of the main issues solved by AppSnap is figuring out the latest version of
an application.

In the Windows world, there is no central body that maintains a centralized
database containing the latest versions of various applications such as APT and
RPM in the Linux world. While such an effort already exists for Windows, it
suffers from issues of continuous maintenance and frequent obsolete packages.
More effort might end up getting spent in keeping the database current than in
enhancing the application itself.

AppSnap solves this problem by providing an API that automates figuring out such
versioning information rather than depending on a mechanical process. While this
method also suffers from potential breaks (an application changes its website or
versioning scheme), it is less likely to break as often (websites don't change
too often and versioning schemes seldom waver after a certain point in a project)
and, most importantly, it does not need the effort to add every new release of
every single application to a central database.

For many large, consistent applications, you'd add it once to db.ini and should
be set for life.

The Database
------------

The AppSnap application database is stored in db.ini. This is a simple INI
file that contains all the information that AppSnap needs in order to
download, install and uninstall the applications that are supported.

Adding an application is as simple as adding a new section to db.ini with
all the required sections populated as needed. The bottom of db.ini provides
a dummy section and some brief information that is useful in order to support
popular installers such as NSIS and InnoSetup.

Several applications are already added and serve as live examples of how the
database works. Popular websites such as SourceForge also have many examples
which will make it very easy to add other applications that are developed there.

Text Replacements
-----------------

AppSnap provides a simple syntax to represent various pieces of information in
the database. The following are a list of supported text replacements.

1. Versioning

   AppSnap gets the latest version of an application from the web. After this
   point, the version information can be utilized in various ways as follows:

   #VERSION#
   The version information as collected from the web

   #MAJOR_VERSION#
   The first chunk of the version. E.g. 3.4.2 becomes 3

   #MAJORMINOR_VERSION#
   The first two chunks of the version. E.g. 3-1-1 becomes 3-1

   #DOTLESS_VERSION#
   The version information stripped of any delimiters. E.g. 4.2.2 becomes 422

   #DASHTODOT_VERSION#
   All dashes replaced by dots. E.g. 2-32-2 becomes 2.32.2

2. Install Directory

   The installation directory configured in config.ini can be forwarded to the
   install and uninstall commands to change the base installation directory.

   #INSTALL_DIR#
   The 'install_dir' as configured in config.ini.

Configuration Options
---------------------

All the options required in order to configure an application are as below:

1. The section name

   The section name is essentially the name of the application. This has to be
   a unique name and has to start with a letter.

   Section names are case sensitive.

   E.g.

   [Firefox]

2. The category

   The category option specifies which category of applications this particular
   application belongs to. This helps classify applications into relevant groups
   and simplifies finding an application within AppSnap. At this time, only a
   single category per application is supported.

   A set of categories are already in use in the version of db.ini shipped along
   with AppSnap.

   E.g.

   category = Internet

   Two special categories are created by AppSnap automatically:
   - All : Selects all the applications in db.ini
   - Installed : Selects all applications currently installed by AppSnap

3. Application description

   This option provides a short description of the application.

   E.g.

   describe = Web Browser

4. Application website

   This option provides a direct link to the application website.

   E.g.

   website = http://www.getfirefox.com

5. The scrape URL

   This is a URL that lists the latest version of the application. This could be
   any kind of HTML page with the version information listed in plain text. In
   many cases, this is the download page of the application or a change log or
   an FTP directory.

   E.g.

   scrape = http://releases.mozilla.org/pub/mozilla.org/firefox/releases/

6. The version string

   This is a regular expression that matches the version format on the scrape URL
   page defined above. Knowledge of regular expressions in Python will prove very
   helpful but here's a short primer:

   - Just the version portion should be enclosed in ()

     clumpsetup-v([0-9]\.[0-9]*).exe

   - Dots outside [] should be escaped

     [0-9]\.[0-9]+    matches    2.44, 1.1, 8.888

   - Should be as specific as possible so as not to pick up irrelevant stuff:

     7z([0-9][0-9][0-9]).exe    instead of    ([0-9][0-9][0-9])

   - Sample expressions

     One number : [0-9]
     One or more numbers : [0-9]+
     Zero or more numbers : [0-9]*
     Only

   - Refer to other examples in db.ini

   E.g.

   version = ([0-9]\.[0-9]+[.0-9]*)/

7. The download URL

   This is the URL from where application installer can be downloaded. This option
   can be ignored if the download URL is the same as the scrape URL.

   This option allows the usage of text replacements.

   E.g.

   download = ftp://ftp.mozilla.org/pub/mozilla.org/firefox/releases/#VERSION#/win32/en-US/

8. Application installer file name

   This is the filename of the application installer which can be found at the above
   download URL.

   This option allows the usage of text replacements.

   E.g.

   filename = Firefox Setup #VERSION#.exe

9. The referer URL

   This is the URL set as the referer for the download URL. When not specified, it
   defaults to the scrape URL. It is required for applications that only allow you
   to download the installer when referred from a specific page.

   This option allows the usage of text replacements.

   E.g.

   referer = http://prdownloads.sourceforge.net/winscp/

10. Installer parameters

    These are the flags to append to the installer when executed. Primarily, this
    allows you to run the installer in silent mode.

    E.g.

    instparam = -ms

11. Is application upgradeable flag

    Set to true if the application is capable of upgrading itself when a newer
    installer is executed, false otherwise. When set to false, AppSnap uninstalls
    the existing install and then installers the newer version.

    E.g.

    upgrades = false

12. Change install directory

    This flag is appended to the installer when executed so as to change the default
    install directory. You will need the #INSTALL_DIR# text replacement here. Leave
    this blank if not possible for the application.

    E.g.

    chinstdir = /D=#INSTALL_DIR#

13. Uninstall information

    This is the name of the folder in the registry containing uninstall information.
    The folder will be a sub-folder of:

    HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Uninstall\

    The folder should contain an 'UninstallString' key containing the uninstall
    command to execute. If an application is listed in Add/Remove Programs, this will
    be easy to find.

    This option allows the usage of text replacements.

    E.g.

    uninstall = Mozilla Firefox (#MAJORMINOR_VERSION#)

14. Uninstaller parameters

    These are the flags to append to the uninstaller when executed. Primarily, this
    allows you to run the uninstall in silent mode.

    The #INSTALL_DIR# text replacement is available here.

    E.g.

    uninstparam = -ms